/** copySOuceObjectAndDecimate
  */
[RoutineDef, copySouceObjectAndDecimate
,
	//[Note, "copySouceObjectAndDecimate"]

	[IPress,Tool:SubTool:Duplicate]

	[RoutineCall, renameSubtool, "Shell-Decimated"]

	[RoutineCall, setDecimationValue]

	/* AHK LAUNCHED BELLOW WORKS ONLY IF SCRIPT IS CRUNNING FROM PLUGIN PALLETE, DOESN'T WORK IF LAUNCHED FROM SCRIPT PANE */
	[If, continue,
		[VarSet, ahkPath,  [StrMerge, PLUGINDATAPATH, "\\Ahk\\copyDecimateAndContinue.ahk"]],
		[VarSet, ahkPath,  [StrMerge, PLUGINDATAPATH, "\\Ahk\\copyAndDecimate.ahk"]]
	]

	//[FileExecute, ZFILEUTILSDLL, "LaunchAppWithFile",  #preprocessCurrent]
	[FileExecute, ZFILEUTILSDLL, "LaunchAppWithFile",  #ahkPath]

, // PARAMS
	continue
]

/** continue After Decimation
  *
  * Fired by autohotkey vi keyboard shortcut
*/
[RoutineDef, continueAfterDecimation
,
	[RoutineCall, zRemeshSubtool]
	[RoutineCall, extractShell]
	[RoutineCall, explodeShell]
	[RoutineCall, liveBooleanOn]

	[IPress,Tool:SubTool:V1]

	[Note, "SHELL DONE",, 0]
]

/** zRemeshSubtool
  */
[RoutineDef, zRemeshSubtool
,
	//[Note, "zRemeshSubtool"]
	//[Note, [StrMerge,
	//	"copySource: ", copySource, "\n\n",
	//	"projectAll: ", projectAll
	//]]

	[VarSet, subtoolNameCurrent, [FileNameExtract, [GetActiveToolPath], 2]]
	[VarSet, sourceIndex, [SubToolGetActiveIndex]]


	[If, copySource || projectAll,
		[IPress,Tool:SubTool:Duplicate]]

	[VarSet, remeshIndex, [SubToolGetActiveIndex]]

	[IPress,Tool:Geometry:ZRemesher]


	//[IPress,Tool:SubTool:V8]


	[If, projectAll,

		/* HIDE ALL SUBTOOLS */
		[Loop, [SubToolGetCount],
			[VarSet,isVis,0]
			[RoutineCall,SubToolIsVisible,isVis, i ]

			[If, (isVis), //code for visible subtool
				[RoutineCall, subtoolVisibility, i , 0 ]]

		, i]

		/* SHOW SOURCE  */
		[RoutineCall, subtoolVisibility, sourceIndex, 1 ]

		/* SHOW REMESHED  */
		[RoutineCall, subtoolVisibility, remeshIndex, 1 ]

		[IPress,Tool:Geometry:Close Holes]

		/* PROJECT DETAILS */
		[IPress,Tool:SubTool:ProjectAll]


		/* REMOVE SOURCE OBJECT */
		[If, copySource == 0,
			[SubToolSelect, sourceIndex ]
			[IKeyPress,'2',[IPress, Tool:SubTool:Delete]] // 2: Ok 3: always ok
		]

		//[IPress,Tool:SubTool:V1]
	]


	/* RENAME REMESH BY SOURCE OBJECT - with suffix  if copy*/
	[If, copySource,
		[RoutineCall, renameSubtool, [StrMerge, subtoolNameCurrent, "-REMESH"] ]
	, // ELSE
		[RoutineCall, renameSubtool, subtoolNameCurrent]
	]



, // PARAMS
	copySource, projectAll
]

/** extractShell
  */
[RoutineDef, extractShell
,

	[VarSet, sourceTool, [SubToolGetActiveIndex] - 1] // decimated copy of source objject
	[VarSet, subtoolDecimated, [SubToolGetActiveIndex]] // decimated copy of source objject
	[VarSet, countBeforeExplode, [SubToolGetCount]]




	[SubToolSelect, sourceTool ]
	[VarSet, sourceToolName, [FileNameExtract, [GetActiveToolPath], 2]]


	[RoutineCall, subtoolVisibility, subtoolDecimated - 1, 1 ]

	[SubToolSelect, subtoolDecimated ]


	/* SET SINGLE POLYGROUP TO SHELL */
	[IPress,Tool:Polygroups:GroupVisible]


	/* SET VALUE OF EXTRACITON  */
	[RoutineCall, setSubtoolThicknessValue]

	/* EXTRACT */
	[ISet,Tool:SubTool:S Smt, 1 ]
	[IPress,Tool:SubTool:Extract]
	[IPress,Tool:SubTool:Accept]


	[RoutineCall, renameSubtool, [StrMerge, sourceToolName, "-EXTRACTED"] ] // rename with thickness in mm subtool-EX-1.5

]

/** explodeShell
  */
[RoutineDef, explodeShell
,

	/* SELECT SOURCE OF EXTRACTION */
	[SubToolSelect, [SubToolGetActiveIndex] - 1 ]
	/* GET VOLUME OF SOURCE OBJECT */
	[VarSet, volumeSource, [GetPolyMesh3DVolume]]

	/* DELETE SOURCE OF EXTRACTION */
	[IKeyPress,'3',[IPress, Tool:SubTool:Delete]] // 2: Ok 3: always ok


	[VarSet, firstGroup, [SubToolGetActiveIndex]] // decimated copy of source objject
	[VarSet, countBeforeExplode, [SubToolGetCount]]

	/* SPLIT BY POLYGROUPS */
	[IKeyPress, '2', [IPress, Tool:Subtool:Groups Split]]

	/* GET SUBTOOLS COUNT BEFORE EXPLODE */
	[VarSet, explodedPolygroupsCount, [SubToolGetCount] - countBeforeExplode ]


	/* SELECT FIRST EXPLODED SUBTOOL */

	/* DELETE OTHER MESHOSES AFTER EXPLODE, ONLY LAST IS LEFT */
	/* DELETE OUTTER MESH - its volume is bigger then source */
	[Loop, explodedPolygroupsCount,

		[SubToolSelect, firstGroup + i ]

		//[IKeyPress,'2',[IPress, Tool:SubTool:Delete]] // 2: Ok 3: always ok
		[VarSet, volumeOfPolygroup, [GetPolyMesh3DVolume]]

		[If, volumeOfPolygroup > volumeSource,
			[IPress, Tool:SubTool:Delete]
			/* UPDATE COUNT OF PARTS */

			[VarSet, explodedPolygroupsCount, explodedPolygroupsCount -1 ]

		]
	,i]


	[If, explodedPolygroupsCount > 1, // THEN
		[VarSet, maxVolume, 0]
		[VarSet, maxVolumeIndex, 0]

		/* FIND LARGEST FROM OTHER EXPLODED POOLYGROUPS */
		[Loop, explodedPolygroupsCount -1,
			//[IKeyPress,'2',[IPress, Tool:SubTool:Delete]] // 2: Ok 3: always ok
			[SubToolSelect, firstGroup + i ]

			[VarSet, volumeOfPolygroup, [GetPolyMesh3DVolume]]

			[If, volumeOfPolygroup > maxVolume,

				[VarSet, maxVolumeIndex, [SubToolGetActiveIndex]]
				[VarSet, maxVolume, volumeOfPolygroup]
			]
		,i]

		[Note, [StrMerge, "maxVolumeIndex: ", maxVolumeIndex ] ]
		/* SELECT LAST PART */
		[SubToolSelect, firstGroup + explodedPolygroupsCount ]
		[Note, [StrMerge, "name: ", [FileNameExtract, [GetActiveToolPath], 2] ] ]
		/* LOOP PARTS FROM END END DELETE OTHERS THEN BIGGEST */
		[Loop, explodedPolygroupsCount,

			[If, maxVolumeIndex != [SubToolGetActiveIndex],
				[IPress, Tool:SubTool:Delete]
			,
				[SubToolSelect, [SubToolGetActiveIndex] -1 ]
			]

		,i]

	]


	//[Loop, explodedPolygroupsCount,
	//	//[IKeyPress,'2',[IPress, Tool:SubTool:Delete]] // 2: Ok 3: always ok
	//	[IPress, Tool:SubTool:Delete]
	//,i]
	//
	//
	///* SET SHELL OBJECT BOOLEAN 'SUBSTRACT' MODE  */
	//[SubToolSelect, firstGroup -1 ]
	//[RoutineCall, setBooleanAdd ]
	//
	///* SET SOURCE OBJECT BOOLEAN 'ADD' MODE  */
	//[SubToolSelect, firstGroup ]
	//[RoutineCall, setBooleanSubstract ]
	//
	//
	//[RoutineCall, maskByCavity]
	//[IPress,Tool:Masking:ShrinkMask]

]



/* liveBooleanOn
*/
[RoutineDef, liveBooleanOn
, /* function */
	[IUnPress,Transform: Pf]
	[IUnPress,Transform:Solo]
	//[CanvasStroke,(ZObjStrokeV03n3%p45AD8A8p3F31468PN-1NNs17F407Cs17F407Cs17F407Cz8000=
	//H183V4BCH183V4BCH183V4BC)]
	[IPress,Render:Render Booleans:Live Boolean]
]


/* Append slicer box
*/
[RoutineDef, appendSlicerBox
, /* function */

	[VarSet, SubtoolActiveInex, [SubToolGetActiveIndex]]
	[VarSet, maxSize, 2]

	[VarSet, xmin, 0]
	[VarSet, ymin, 0]
	[VarSet, zmin, 0]
	[VarSet, xmax, -1]
	[VarSet, ymax, -1]
	[VarSet, zmax, -1]

	[Mesh3DGet, 2, 2,, xmin, ymin, zmin, xmax, ymax, zmax]



	[VarDef,toolID,0]
	[VarSet,toolID,[IGet,Tool:Item Info]]

	[IPress,Tool:Cube3D]

	//store the new OBJ tool name
	[VarSet,toolName,[IGetTitle,Tool:Current Tool,0]]

	//select the main OBJ ztool
	[ISet,Tool:ItemInfo,#toolID]
	//append the new OBJ
	[If,[IExists,Tool:SubTool:Append],
		[IPress,Tool:SubTool:Append]
		[IPress,[StrMerge,"PopUp:",[Var,toolName]]]
	]

	/* SELECT LAST (appended) TOOL */
	[SubToolSelect, [SubToolGetCount] - 1 ]
	[RoutineCall, renameSubtool, "SLICER"]


	[ISet,Tool:Geometry:XYZ Size, maxSize *1.1 ]
	[ISet,Tool:Geometry:Y Size, maxSize / 4 ]


	//[ISet,Tool:Geometry:Y Position,  ymax + [IGet,Tool:Geometry:Y Size] ]
	[ISet,Tool:Geometry:Y Position,  ymax ]

	[VarSet,subtoolPath,[StrMerge,"Tool:Subtool:", [IGetTitle,"Tool:Current Tool"]]]
//
	//[If,(2 & [IModGet,subtoolPath]) != 2,
		[VarSet,wid,[IWidth,subtoolPath]]

	[IClick,subtoolPath,wid-75,5]


	[VarSet, moveUpCount, [SubToolGetCount] - SubtoolActiveInex - 2 ]

	[Loop, moveUpCount,
		[IPress,Tool:SubTool:MoveUp]]



	/* TURN POLYFRAME ON IF LIVE BOLLEAN IS ACTIVE */
	[If, [IGet,Render:Render Booleans:Live Boolean], // THEN
		[IPress,Transform: Pf]]


	[IPress,Transform:Fit]

	[IPress,Transform:Move]
	[ISet,Draw:Focal Shift,-100]

]


/* maskByCavity
*/
[RoutineDef, maskByCavity
, /* function */



	[ISet,Tool:Masking:Blur,100]

	[ISet,Tool:Masking:Intensity,5]

	[IPress,Tool:Display Properties:Flip]
		[IPress,Tool:Masking:Mask By Cavity]
	[IPress,Tool:Display Properties:Flip]

	[IPress,Tool:Masking:Inverse]

//, /* parameters or output */

]